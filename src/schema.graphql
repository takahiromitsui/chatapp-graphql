type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    created_at: String!
    updated_at: String!
    rooms: [Room!]
    messages: [Message!]
}

type Room {
    id: ID!
    name: String!
    created_at: String!
    updated_at: String!
    users: [User!]
    messages: [Message!]
}

type Message {
    id: ID!
    content: String!
    created_at: String!
    updated_at: String!
    user: User!
    room: Room!
}

type UsersResult {
  success: Boolean!
  errors: [String]
  data: [User]
}

type UserResult {
  success: Boolean!
  errors: [String]
  data: User
}

type RoomsResult {
  success: Boolean!
  errors: [String]
  data: [Room]
}

type RoomResult {
  success: Boolean!
  errors: [String]
  data: Room
}

type MessagesResult {
  success: Boolean!
  errors: [String]
  data: [Message]
}

type MessageResult {
  success: Boolean!
  errors: [String]
  data: Message
}

type LoginResult {
  success: Boolean!
  errors: [String]
  data: User
  token: String
}

type Query {
    user(id: ID!): User
    room(id: ID!): Room
    message(id: ID!): Message
    users: UsersResult!
    rooms: RoomsResult!
    messages: MessagesResult!
    roomsByUserId(user_id: ID!): RoomsResult!
    login(email: String!, password: String!): LoginResult!
}

type Mutation {
    createUser(name: String!, email: String!, password: String!): UserResult
    createRoom(name: String!): RoomResult
    createMessage(content: String!, user_id: ID!, room_id: ID!): MessageResult
    # updateUser(id: String!, name: String, email: String, password: String): [Int!]!
    # updateRoom(id: String!, name: String): [Int!]!
    # updateMessage(id: String!, content: String): [Int!]!
    # deleteUser(id: String!): Int!
    # deleteRoom(id: String!): Int!
    # deleteMessage(id: String!): Int!
}